<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.community.dao.OlderMapper">
    <resultMap id="BaseResultMap" type="com.community.entity.Older">
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="authority" jdbcType="VARCHAR" property="authority"/>
        <result column="open_id" jdbcType="VARCHAR" property="openId"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="weChat_id" jdbcType="VARCHAR" property="wechatId"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithMenu" type="com.community.entity.MenuDetail">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        `user_id`, `password`, `authority`, `open_id`, `user_name`, `phone`, `address`, `weChat_id`
    </sql>
    <select id="selectByExample" parameterType="com.community.entity.example.OlderExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from olders
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="com.community.entity.example.OlderExample">
        delete from olders
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.community.entity.Older">
        insert into olders (`user_id`, `password`, `authority`,
        `open_id`, `user_name`, `phone`,
        `address`, `weChat_id`)
        values (#{userId,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{authority,jdbcType=VARCHAR},
        #{openId,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
        #{address,jdbcType=VARCHAR}, #{wechatId,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.community.entity.Older">
        insert into olders
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                `user_id`,
            </if>
            <if test="password != null">
                `password`,
            </if>
            <if test="authority != null">
                `authority`,
            </if>
            <if test="openId != null">
                `open_id`,
            </if>
            <if test="userName != null">
                `user_name`,
            </if>
            <if test="phone != null">
                `phone`,
            </if>
            <if test="address != null">
                `address`,
            </if>
            <if test="wechatId != null">
                `weChat_id`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="authority != null">
                #{authority,jdbcType=VARCHAR},
            </if>
            <if test="openId != null">
                #{openId,jdbcType=VARCHAR},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="wechatId != null">
                #{wechatId,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.community.entity.example.OlderExample" resultType="java.lang.Long">
        select count(*) from olders
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update olders
        <set>
            <if test="record.userId != null">
                `user_id` = #{record.userId,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                `password` = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.authority != null">
                `authority` = #{record.authority,jdbcType=VARCHAR},
            </if>
            <if test="record.openId != null">
                `open_id` = #{record.openId,jdbcType=VARCHAR},
            </if>
            <if test="record.userName != null">
                `user_name` = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.phone != null">
                `phone` = #{record.phone,jdbcType=VARCHAR},
            </if>
            <if test="record.address != null">
                `address` = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.wechatId != null">
                `weChat_id` = #{record.wechatId,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update olders
        set `user_id` = #{record.userId,jdbcType=VARCHAR},
        `password` = #{record.password,jdbcType=VARCHAR},
        `authority` = #{record.authority,jdbcType=VARCHAR},
        `open_id` = #{record.openId,jdbcType=VARCHAR},
        `user_name` = #{record.userName,jdbcType=VARCHAR},
        `phone` = #{record.phone,jdbcType=VARCHAR},
        `address` = #{record.address,jdbcType=VARCHAR},
        `weChat_id` = #{record.wechatId,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>


    <select id="selectByActivity" resultMap="BaseResultMap">
        SELECT `user_id`, `user_name`, `phone`, `address`, `weChat_id` FROM activity_detail WHERE notice_id =
        #{noticeId}
        <if test="userId != null">
            AND `user_id` = #{userId}
        </if>
    </select>
    <select id="selectByFamily" resultMap="BaseResultMap">
        SELECT
        older.user_name AS user_name,
        older.phone AS phone,
        older.address AS address,
        older.weChat_id AS weChat_id,
        older.user_id AS user_id
        FROM
        link INNER JOIN older ON link.older_id = older.user_id
        WHERE
        link.family_id = #{familyId}
    </select>
    <select id="selectByMenu" resultMap="ResultMapWithMenu">
        SELECT older.user_id AS `user_id`, `user_name`, `phone`, `address`, `weChat_id`, `content`
        FROM older INNER JOIN reservation ON older.user_id = reservation.user_id
        WHERE reservation.menu_id = #{menuId}
        LIMIT ${(page.page - 1) * page.record}, #{page.record}
    </select>
    <select id="selectByMenuCount" resultType="integer">
        select count(*)
        FROM older INNER JOIN reservation ON older.user_id = reservation.user_id
        WHERE reservation.menu_id = #{menuId}
    </select>
</mapper>